package templates

import (
    "github.com/pocketbase/pocketbase/tools/types"
)

type ThreadListEntryParams struct {
    Id string `db:"id" json:"id"`
    Title string `db:"thread_title" json:"thread_title"`
    LastMessage string `db:"last_message" json:"last_message"`
    LastMessageTimestamp types.DateTime `db:"last_message_timestamp" json:"last_message_timestamp"`
    Created types.DateTime `db:"created" json:"created"`  
    Model string `db:"model" json:"model"`
}

templ ThreadTitleEditor(id string, currentTitle string) {
    <input
        hx-put={ "/thread/title/" + id }
        hx-trigger="blur, keyup[keyCode==13]" 
        hx-target="this"
        hx-swap="outerHTML"
        class="title-edit"
        type="text"
        placeholder="Enter title..."
        name="title"
        autofocus
        onfocus="this.select();"
        value={ currentTitle }
    ></input>
}

templ ThreadTitle(id string, title string) {
    <div
        hx-trigger="click consume"
        hx-get={ "/thread/title/" + id }
        hx-target="this"
        hx-swap="outerHTML"
    >
        <h3 class="thread-entry-title">
            { title }
        </h3>
    </div>
}

templ ThreadTitleUpdate(id string, title string) {
    @ThreadTitle(id, title)
    @OobTextSwap("thread-title", title)
}

templ OobTextSwap(id string, value string) {
   <div id={ id } hx-swap-oob="innerHTML">{ value }</div>
}

templ LastMessageTimestamp(id string, time types.DateTime) {
   <div id={ "last-updated-" + id } hx-swap-oob="innerHTML">Updated at: { types.DateTime.String(time) }</div>
}

templ ThreadListEntry(params ThreadListEntryParams, threadTags []TagParams, isNew bool) {
    <div 
        id={ params.Id }
        class="thread-list-entry"
        hx-get={ "/thread/" + params.Id }
        hx-trigger="click"
        hx-target="#chat-messages"
        if isNew {
            _={ "init set $thread_id to " + "\"" + params.Id + "\"" + " set #thread-title.innerText to " + "\"" + params.Id + "\"" + " set #thread-id-chat.value to " + "\"" + params.Id + "\"" + "remove @disabled from #message-input" }
        } else {
            _={ "on click set $thread_id to " + "\"" + params.Id + "\"" + " set #thread-title.innerText to " + "\"" + params.Title + "\"" + " set #thread-id-chat.value to " + "\"" + params.Id + "\"" + "remove @disabled from #message-input" }
        }
    >

        @ThreadTitle(params.Id, params.Title)
        <p class="thread-entry-model"> { params.Model } </p>
        <!-- <p class="thread-entry-message"> { params.LastMessage } </p> -->
        <div class="dual-timestamps-container">
            <p class="timestamp start">Created at: { types.DateTime.String(params.Created) } </p>
            <p id={ "last-updated-" + params.Id } class="timestamp end">Updated at: { types.DateTime.String(params.LastMessageTimestamp) } </p>     
        </div>

        <div id={ "tags-" + params.Id } class="tags-container">
            <p 
                hx-get={ "/thread/tag/" + params.Id }
                hx-trigger="click consume"
                hx-target={ "#" + params.Id }
                hx-swap="beforeend"
                class="tag"
            >
                tag +
            </p>
            for _, tag := range threadTags {
                <p class={ "tag", tagStyle(tag.Color) }> { tag.Value } </p>
            }
        </div>
    </div> 
}

css tagStyle (color string) {
    background-color: { color };
}

templ Tag(params TagParams) {
    <p class="tag"> { params.Value } </p>
}

templ NewThreadListEntry(params ThreadListEntryParams) {
    <div
        id="threads-list"
        hx-swap-oob="afterbegin"
        _={ "init set $thread_id to " + "\"" + params.Id + "\"" + " set #thread-title.innerText to " + "\"" + params.Id + "\"" + " set #thread-id-chat.value to " + "\"" + params.Id + "\"" + "remove @disabled from #message-input" }
    >
        @ThreadListEntry(params, []TagParams{}, true)
    </div> 
    <div class="chat-window" id="chat-window" hx-swap-oob="outerHTML">
        <div class="chat-title-header">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;"><path d="M4 18h2v4.081L11.101 18H16c1.103 0 2-.897 2-2V8c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v8c0 1.103.897 2 2 2z"></path><path d="M20 2H8c-1.103 0-2 .897-2 2h12c1.103 0 2 .897 2 2v8c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2z"></path></svg>
            <p id="thread-title" class="thread-title">Create or select thread from the sidebar</p>
            <select
                hx-get="/model"
                hx-trigger="change"
                hx-target="this"
                hx-swap="afterend"
                name="model"
                class="model-select"
            >
                <option value="openai">OpenAI API</option>
                <option value="groq">Groq API</option>
            </select>
        </div>

        <!-- fill message history here, stream responses --> 
        <div class="messages-container" id="chat-messages">

        </div>
    </div>
}

templ ThreadListEntries(paramsList []ThreadListEntryParams, allTags [][]TagParams) {
    for i, params := range paramsList {
        @ThreadListEntry(params, allTags[i], false)
    }
}
