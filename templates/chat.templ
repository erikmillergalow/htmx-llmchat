package templates

type LoadedMessageParams struct {
	Id      string `db:"id" json:"id"`
	Message string `db:"message" json:"message"`
	Model   string `db:"model" json:"model"`
	// Timestamp int
	Sender   string `db:"sender" json:"sender"`
	ThreadId string `db:"thread_id" json:"thread_id"`
	Useful   bool   `db:"useful" json:"useful"`
}

type ChatMessageParams struct {
	Id           string
	UserMessage  string
	Model        string
}

templ ChatStreamChunk(id string, chunk string) {
	<div id={ "response-content-" + id } hx-swap-oob="beforeend">{ chunk } </div>
}

templ HumanMessage(message string) {
	<div class="chat-message from-user">
		<div class="chat-message-user"><i>user:</i></div>
		{ message }
	</div>
}

templ UsefulnessButton(messageId string, useful bool) {
	if useful {
		<svg
			class="useful-chat-icon icon-hover"
			hx-post={ "http://127.0.0.1:8090/chat/useful/" + messageId }
			hx-trigger="click consume"
			hx-target={ "#chat-usefulness-container-" + messageId }
			hx-swap="innerHTML"
			xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="transform: ;msFilter:;"
		><path d="M21.947 9.179a1.001 1.001 0 0 0-.868-.676l-5.701-.453-2.467-5.461a.998.998 0 0 0-1.822-.001L8.622 8.05l-5.701.453a1 1 0 0 0-.619 1.713l4.213 4.107-1.49 6.452a1 1 0 0 0 1.53 1.057L12 18.202l5.445 3.63a1.001 1.001 0 0 0 1.517-1.106l-1.829-6.4 4.536-4.082c.297-.268.406-.686.278-1.065z"></path>
		</svg>
	} else {
		<svg
			class="useful-chat-icon icon-hover"
			hx-post={ "http://127.0.0.1:8090/chat/useful/" + messageId }
			hx-trigger="click consume"
			hx-target={ "#chat-usefulness-container-" + messageId }
			hx-swap="innerHTML"
			xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="transform: ;msFilter:;"
		><path d="m6.516 14.323-1.49 6.452a.998.998 0 0 0 1.529 1.057L12 18.202l5.445 3.63a1.001 1.001 0 0 0 1.517-1.106l-1.829-6.4 4.536-4.082a1 1 0 0 0-.59-1.74l-5.701-.454-2.467-5.461a.998.998 0 0 0-1.822 0L8.622 8.05l-5.701.453a1 1 0 0 0-.619 1.713l4.214 4.107zm2.853-4.326a.998.998 0 0 0 .832-.586L12 5.43l1.799 3.981a.998.998 0 0 0 .832.586l3.972.315-3.271 2.944c-.284.256-.397.65-.293 1.018l1.253 4.385-3.736-2.491a.995.995 0 0 0-1.109 0l-3.904 2.603 1.05-4.546a1 1 0 0 0-.276-.94l-3.038-2.962 4.09-.326z"></path>
		</svg>		
	}
}

// init used when forming the initial response skeleton
templ ModelMessage(message LoadedMessageParams, init bool) {
	<div id={ "response-" + message.Id } class="chat-message from-model">
		<div class="chat-message-header">
			<div class="chat-message-model"><i>{ message.Model }:</i></div>
			<div id={"chat-usefulness-container-" + message.Id} class="chat-usefulness-container">
				@UsefulnessButton(message.Id, message.Useful)
			</div>
		</div>
		if init {
			<div id={ "response-content-" + message.Id }></div>
		} else {
			<div id={ "response-content-" + message.Id }>{ message.Message }</div>
		}
	</div>
}

templ ErrorChatResponse(message string) {
	<div id="chat-messages" hx-swap-oob="beforeend">
		@ErrorChatMessage(message)
	</div>
}

templ ErrorChatMessage(message string) {
	<div class="chat-message from-error">
		<div class="chat-message-error"><i>system:</i></div>
		{ message }
	</div>
}

templ InitChatMessage(messageParams LoadedMessageParams) {
	<div id="chat-messages" hx-swap-oob="beforeend">
		@HumanMessage(messageParams.Message)
		@ModelMessage(messageParams, true)
	</div>
}

templ LoadedThread(threadTitle string, messages []LoadedMessageParams) {
	<div id="thread-title" hx-swap-oob="innerHTML">
		{ threadTitle }
	</div>
	for _, message := range messages {
		if message.Sender == "human" {
			@HumanMessage(message.Message)
		} else if message.Sender == "model" {
			@ModelMessage(message, false)
		} else if message.Sender == "system" {
			@ErrorChatMessage(message.Message)
		}
	}
}

templ NoApisAvailable() {
	<div class="initial-window" id="initial-window">
		<h1 class="initial-title">Welcome to HTMXLLMChat</h1>

		<p class="initial-text">
			Click the &nbsp
			<svg class="initial-svg" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" style="fill: rgba(0, 0, 0, 1);transform: ;msFilter:;"><path d="M3 8h2v5c0 2.206 1.794 4 4 4h2v5h2v-5h2c2.206 0 4-1.794 4-4V8h2V6H3v2zm4-6h2v3H7zm8 0h2v3h-2z"></path></svg>
			&nbsp icon to configure an API endpoint to get started. 
		</p>
		<br/>
		<p>
			Works with any OpenAI compatible API.
		</p>

		<h3 style="margin-top: 1rem; margin-bottom: 0.5rem">Recommendations:</h3>
		<ul>
			<li>
				<b><a href="https://ollama.com" target="_blank" class="initial-link">Ollama:</a></b>
				<ul>
					<li>API endpoint: <code>http://localhost:11434/v1</code></li>
					<li>API key: ollama</li>
				</ul>
			</li>
			<li>
				<b><a href="https://localai.io//" target="_blank" class="initial-link">LocalAI:</a></b>
				<ul>
					<li>API endpoint: <code>http://0.0.0.0:8080/v1</code></li>
				</ul>
			</li>
			<li>
				<b><a href="https://github.com/abetlen/llama-cpp-python" target="_blank" class="initial-link">llama-cpp-python:</a></b>
				<ul>
					<li>OpenAI compatible web server <a href="https://llama-cpp-python.readthedocs.io/en/latest/#openai-compatible-web-server" target="_blank" class="initial-link">python3 -m llama_cpp.server</a></li>
					<li>Use --config_file <a href="https://llama-cpp-python.readthedocs.io/en/latest/server/#configuration-and-multi-model-support" target="_blank" class="initial-link">multi-model mode</a></li>
					<li>API endpoint: <code>http://0.0.0.0:8080/v1</code></li>
				</ul>
			</li>
			<li>
				<b><a href="https://console.groq.com/login" target="_blank" class="initial-link">Groq:</a></b>
				<ul>
					<li>Free API access to hosted instances of Meta, Google, OpenAI, and Groq models.</li>
					<li>Generate API key in <a href="https://console.groq.com/keys" target="_blank" class="initial-link">cloud console</a></li>
					<li>API endpoint: <code>https://api.groq.com/openai/v1</code></li>
				</ul>
			</li>
			<li>
				<b><a href="https://platform.openai.com/signup" target="_blank" class="initial-link">OpenAI:</a></b>
				<ul>
					<li>Paid API access, large selection of models.</li>
					<li>Create API in <a href="https://platform.openai.com/api-keys" target="_blank" class="initial-link">cloud console</a></li>
					<li>API endpoint: <code>ihttps://api.openai.com/v1</code></li>
				</ul>
			</li>
		</ul>

	</div>
}

templ UsefulnessResponse(messageId string, useful bool) {	
	if useful {
		<p
			_="on load wait 2s transition opacity to 0 then remove me"
			class="useful-chat-message"
		>
			Message marked as useful
		</p>
		@UsefulnessButton(messageId, useful)
	} else {
		<p
			_="on load wait 2s transition opacity to 0 then remove me"
			class="useful-message-message"
		>
			Message marked as not useful
		</p>
		@UsefulnessButton(messageId, useful)
	}	
}

templ ActiveChat() {
	<div class="chat-window" id="chat-window">
		<div class="chat-title-header">
			<div class="chat-header-left">
				<svg
					class="threads-icon"
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					style="
                        transform:;
                        msfilter:;
                    "
				>
					<path
						d="M4 18h2v4.081L11.101 18H16c1.103 0 2-.897 2-2V8c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v8c0 1.103.897 2 2 2z"
					></path>
					<path d="M20 2H8c-1.103 0-2 .897-2 2h12c1.103 0 2 .897 2 2v8c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2z"></path>
				</svg>
				<p id="thread-title" class="thread-title">
					Create or select thread from the sidebar
				</p>
			</div>
			<div
				id="chat-api-select"
				class="chat-api-select"
				hx-get="http://127.0.0.1:8090/apis"
				hx-trigger="load, refresh-apis from:body"
				hx-target="this"
				hx-swap="innerHTML"
			></div>
		</div>
		<!-- fill message history here, stream responses -->
		<div class="messages-container" id="chat-messages"></div>
	</div>
	<div
		id="input-container"
		class="input-container"
		hx-ext="ws"
		ws-connect="http://127.0.0.1:8090/ws"
		hx-on:htmx:ws-after-send="document.querySelector('#sender-form').reset()"
	>
		<form
			id="sender-form"
			class="send-message-form"
			ws-send
			hx-trigger="keyup[keyCode==13&&!shiftKey]"
			hx-on::after-request="console.log('after')"
		>
			<input id="thread-id-chat" name="thread-id-chat" type="hidden"/>
			<textarea
				disabled
				form="sender-form"
				id="message-input"
				name="new-message"
				class="message-input"
				placeholder="Enter prompt..."
			></textarea>
			<button ws-send class="send-message-button">
				Send
			</button>
		</form>
	</div>
}
