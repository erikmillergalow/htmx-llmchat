package templates

type ApiParams struct {
    Id string `db:"id" json:"id"`
    Name string `db:"name" json:"name"`
    Url string `db:"url" json:"url"`
    ApiKey string `db:"api_key" json:"api_key"`
}

templ SelectApiStatus(msg string, updated bool) {
    if (updated) {
        <p
            class="select-api-status"
            _="on load wait 2s transition opacity to 0 then remove me"
        >
            { msg }
        </p>
    }
}

templ ApiSelect(selectedApiId string, paramsList []ApiParams) {
    <select
        hx-put="http://127.0.0.1:8090/api/select"
        hx-trigger="click"
        hx-target="this"
        hx-swap="afterend"
        id="api-select"
        name="api"
        value={ selectedApiId }
    >
        for _, params := range paramsList {
            if params.Id == selectedApiId {
                <option value={ params.Id }>{ params.Name }</option>
            }
        }
        for _, params := range paramsList {
            if params.Id != selectedApiId {
                <option value={ params.Id }>{ params.Name }</option>
            }
        }
    </select>
    <div
        hx-post={ "http://127.0.0.1:8090/apis/models"}
        hx-include="[name='api']"
        hx-trigger="load, refresh-models from:body"
        hx-target="this"
        hx-swap="innerHTML"
    ></div>
}

templ ApiModelSelect(selectedModelName string, models []string) {
    <select
        hx-post="http://127.0.0.1:8090/apis/model"
        hx-trigger="change"
        hx-target="this"
        hx-swap="afterend"
        id="api-model-name"
        name="api-model-name"
        class="model-names-select"
        value={ selectedModelName }
    >
    if selectedModelName == "" {
        <option value="">Select model</option>
    }
    for _, model := range models {
        if model == selectedModelName {
            <option value={ model }>{ model }</option>
        }
    }
    for _, model := range models {
        if model != selectedModelName {
            <option value={ model }>{ model }</option>
        }
    }
    </select>
}

templ ApiModelsUnavailable() {
    <select
        id="api-model-name"
        name="api-model-name"
        class="model-names-select"
    >
        <option value="">Unable to list models</option>
    </select>
}

templ NewApiEditor(params ApiParams) {
    <div
        id="api-editors-list"
        hx-swap-oob="afterbegin"
    >
        @ApiEditor(params)
    </div>
}

templ ApiEditor(params ApiParams) {
    <form
        hx-patch={ "http://127.0.0.1:8090/apis/update/" + params.Id}
        hx-target="this"
        hx-swap="beforeend"
        id={ "model-editor-" + params.Id }
        class="api-editor"
    >
        <div
            class="delete-api"
        >
            <label class="api-label">Display name:</label>
            <svg
                hx-delete={ "http://127.0.0.1:8090/apis/" + params.Id }
                hx-trigger="click"
                hx-target={ "#model-editor-" + params.Id }
                hx-swap="outerHTML"
                hx-confirm="Delete API definition?"
                class="delete-api-icon icon-hover"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                style="
                    transform:;
                    msfilter:;
                "
            >
                <path
                    d="M6 7H5v13a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7H6zm10.618-3L15 2H9L7.382 4H3v2h18V4z"
                ></path>
            </svg>
        </div>
        <input
            name="display-name"
            class="api-input"
            placeholder="Enter display name..."
            value={ params.Name }
        ></input>

        <label class="api-label">URL:</label>
        <input
            name="url"
            class="api-input"
            placeholder="Enter URL..."
            value={ params.Url }
        ></input>

        <label class="api-label">API key:</label>
        <input
            name="api-key"
            class="api-input"
            placeholder="Enter API key..."
            type="password"
            value={ params.ApiKey }
        ></input>

        <button class="api-submit-button">
            Update
        </button>
    </form>
}

templ ModelUpdateResult() {
    <p
        class="model-update-result"
        _="on load wait 2s transition opacity to 0 then remove me"
    >
        Model updated!
    </p>
}

templ ApiEditorsList(paramsList []ApiParams) {
    <div class="apis-menu">
        <button
            hx-post="http://127.0.0.1:8090/apis/create"
            hx-trigger="click"
            hx-target="#api-editors-list"
            hx-swap="none"
            class="create-model-button"
        >
            Add new model
        </button>
        <div id="api-editors-list">
            for _, params := range paramsList {
                @ApiEditor(params)
            }
        </div>
    </div>
}

templ DeletedModel() {
    <p
        class="delete-api-status"
        _="on load wait 2s transition opacity to 0 then remove me"
    >
        Model deleted...
    </p>
}
