package templates

type ModelParams struct {
    Id string `db:"id" json:"id"`
    Name string `db:"name" json:"name"`
    Url string `db:"url" json:"url"`
    ApiKey string `db:"api_key" json:"api_key"`
    ApiModelName string `db:"api_model_name" json:"api_model_name"`
    Color string `db:"color" json:"color"`
}

templ SelectModelStatus(msg string) {
    <p
        class="select-model-status"
        _="on load wait 2s transition opacity to 0 then remove me"
    >
        { msg }
    </p>
}

templ ModelSelect(paramsList []ModelParams) {
    <select
        hx-get="/model"
        hx-trigger="change"
        hx-target="this"
        hx-swap="afterend"
        id="model-select"
        name="model"
        class="model-select"
    >
        for _, params := range paramsList {
            <option value={ params.Id }>{ params.Name }</option>
        }
    </select>
}

templ ApiModelSelect(models []string) {
    <select
        id="api-model-name"
        name="api-model-name"
        class="model-names-select"
    >
    for _, model := range models {
        <option value={ model }>{ model }</option>
    }
    </select>
}

templ ApiModelsUnavailable() {
    <select
        id="api-model-name"
        name="api-model-name"
        class="model-names-select"
    >
        <option value="">Unable to list models</option>
    </select>
}

templ NewModelEditor(params ModelParams) {
    <div
        id="model-editors-list"
        hx-swap-oob="afterbegin"
    >
        @ModelEditor(params)
    </div>
}

templ ModelEditor(params ModelParams) {
    <form
        hx-post={ "/models/update/" + params.Id}
        hx-target="this"
        hx-swap="beforeend"
        id={ "model-editor-" + params.Id }
        class="model-editor"
    >
        <div
            class="delete-model"
            hx-delete={ "/models/" + params.Id }
            hx-trigger="click"
            hx-target={ "#model-editor-" + params.Id }
            hx-swap="outerHTML"
        >
            <svg
                class="delete-model-icon"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                style="
                    fill: rgba(0, 0, 0, 1);
                    transform:;
                    msfilter:;
                "
            >
                <path
                    d="M6 7H5v13a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7H6zm10.618-3L15 2H9L7.382 4H3v2h18V4z"
                ></path>
            </svg>
        </div>
        <label class="model-label">Display name:</label>
        <input
            id={ "model-name-" + params.Id }
            name="display-name"
            class="model-input"
            placeholder="Enter display name..."
            value={ params.Name }
        ></input>

        <label class="model-label">URL:</label>
        <input
            id={ "model-url-" + params.Id }
            name="url"
            class="model-input"
            placeholder="Enter URL..."
            value={ params.Url }
        ></input>

        <label class="model-label">API key:</label>
        <input
            id={ "model-key-" + params.Id }
            name="api-key"
            class="model-input"
            placeholder="Enter API key..."
            type="password"
            value={ params.ApiKey }
        ></input>

        <label class="model-label">API model name:</label>
        <div
            hx-get={ "/models/names/" + params.Id }
            hx-trigger="load, click delay:500ms from:#model-submit-button"
            hx-target="this"
            hx-swap="innerHTML"
        ></div>

        <label class="model-label">Color:</label>
        <input
            id={ "model-color" + params.Id }
            name="color"
            class="model-input"
            type="color"
            value={ params.Color }
        ></input>

        <button
            id="model-submit-button"
            class="model-submit-button"
        >
            Update
        </button>
    </form>
}

templ ModelUpdateResult() {
    <p
        class="model-update-result"
        _="on load wait 2s transition opacity to 0 then remove me"
    >
        Model updated!
    </p>
}

templ ModelEditorsList(paramsList []ModelParams) {
    <div class="models-menu">
        <button
            hx-post="/models/create"
            hx-trigger="click"
            hx-target="#model-editors-list"
            hx-swap="none"
            class="create-model-button"
        >
            Add new model
        </button>
        <div id="model-editors-list">
            for _, params := range paramsList {
                @ModelEditor(params)
            }
        </div>
    </div>
}

templ DeletedModel() {
    <p
        class="delete-model-status"
        _="on load wait 2s transition opacity to 0 then remove me"
    >
        Model deleted...
    </p>
}
